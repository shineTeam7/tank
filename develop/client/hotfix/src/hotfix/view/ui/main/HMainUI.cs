using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
public class HMainUI:GameUIBase
{
	/// <summary>
	/// 玩家对象
	/// </summary>
	public HPlayer hme=HGameC.player;
	
	/** UI模型 */
	private UIModel_mainUI _model;

	protected override UIModel createModel()
	{
		return _model=new UIModel_mainUI();
	}

	protected override void registLogics()
	{
		base.registLogics();

	}
	
	protected override void init()
	{
		base.init();

		_model.Button_start.click=()=>
		{
			if(me.scene.isMatching())
			{
				FuncApplyCancelMatchRequest.create(GFunctionType.Melee).send();
			}
			else
			{
				FuncApplyMatchRequest.create(GFunctionType.Melee).send();
			}
		};

		registPlayerEventListener(GameEventType.StartMatch,onMatchChange);
		registPlayerEventListener(GameEventType.CancelMatch,onMatchChange);
	}
	
	protected override void dispose()
	{
		base.dispose();
		
	}
	
	protected override void onEnter()
	{
		base.onEnter();

		onMatchChange();
	}
	
	protected override void onExit()
	{
		base.onExit();
		
	}

	protected void onMatchChange()
	{
		if(me.scene.isMatching())
		{
			_model.Button_start.setTextString("匹配中");
		}
		else
		{
			_model.Button_start.setTextString("开始匹配");
		}
	}
}
