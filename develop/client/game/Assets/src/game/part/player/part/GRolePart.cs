using ShineEngine;

/// <summary>
/// 角色(generated by shine)
/// </summary>
public class GRolePart:RolePart
{
	/// <summary>
	/// 角色对象
	/// </summary>
	public GPlayer gme;
	
	/** 数据 */
	private GRolePartData _d;
	
	public override void setMe(Player player)
	{
		base.setMe(player);
		gme=(GPlayer)player;
	}
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(GRolePartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public GRolePartData getGPartData()
	{
		return _d;
	}
	
	protected override BaseData createPartData()
	{
		return new GRolePartData();
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{
		base.init();
		
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
		base.dispose();
		
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{
		base.afterReadData();
		
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
		base.construct();
		
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		base.beforeMakeData();
		
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
		base.onFunctionOpen(id);
		
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
		base.onFunctionClose(id);
		
	}
	
}
