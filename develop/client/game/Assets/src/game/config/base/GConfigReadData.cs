using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
[Hotfix]
public class GConfigReadData:ConfigReadData
{
	/// <summary>
	/// 场景表字典
	/// </summary>
	public IntObjectMap<GSceneConfig> gsceneDic;
	
	/// <summary>
	/// 界面表字典
	/// </summary>
	public IntObjectMap<GUIConfig> guiDic;
	
	/// <summary>
	/// 功能表字典
	/// </summary>
	public IntObjectMap<GFunctionConfig> gfunctionDic;
	
	/// <summary>
	/// 读取全局配置表
	/// </summary>
	protected override void readGlobal(BytesReadStream stream)
	{
		global=new GGlobalReadData();
		global.readBytesSimple(stream);
	}
	
	/// <summary>
	/// 设置值到Config上
	/// </summary>
	public override void setToConfigOne(int type)
	{
		base.setToConfigOne(type);
		
		switch(type)
		{
			case ConfigType.Global:
			{
				GGlobal.readFromData((GGlobalReadData)global);
				GGlobal.afterReadConfig();
			}
				break;
			case ConfigType.Function:
			{
				GFunctionConfig.setGDic(gfunctionDic);
			}
				break;
			case ConfigType.Scene:
			{
				GSceneConfig.setGDic(gsceneDic);
			}
				break;
			case ConfigType.UI:
			{
				GUIConfig.setGDic(guiDic);
			}
				break;
		}
	}
	
	/// <summary>
	/// 读完所有配置
	/// </summary>
	public override void afterReadConfigAllOne(int type)
	{
		base.afterReadConfigAllOne(type);
		
		switch(type)
		{
			case ConfigType.Global:
			{
				GGlobal.afterReadConfigAll();
			}
				break;
			case ConfigType.Function:
			{
				GFunctionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Scene:
			{
				GSceneConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UI:
			{
				GUIConfig.afterReadConfigAll();
			}
				break;
		}
	}
	
	/// <summary>
	/// 构造常量size
	/// </summary>
	public override void makeConstSize()
	{
		base.makeConstSize();
		
		ActivityType.size=GActivityType.size;
		AttributeType.size=GAttributeType.size;
		EquipSlotType.size=GEquipSlotType.size;
		FunctionType.size=GFunctionType.size;
		ItemEquipType.size=GItemEquipType.size;
		MapBlockType.size=GMapBlockType.size;
		MotionType.size=GMotionType.size;
		RoleGroupChangeType.size=GRoleGroupChangeType.size;
		RoleGroupTitleType.size=GRoleGroupTitleType.size;
		SceneType.size=GSceneType.size;
		TeamTargetType.size=GTeamTargetType.size;
		UnitAICommandType.size=GUnitAICommandType.size;
		VocationType.size=GVocationType.size;
	}
	
	/// <summary>
	/// 从流读取单个
	/// </summary>
	protected override void readBytesOne(int type,BytesReadStream stream)
	{
		base.readBytesOne(type,stream);
		
	}
	
	/// <summary>
	/// 刷新数据
	/// </summary>
	public override void refreshDataOne(int type)
	{
		base.refreshDataOne(type);
		
	}
	
	/// <summary>
	/// 读取场景表
	/// </summary>
	protected override void readScene(BytesReadStream stream)
	{
		GSceneConfig config;
		int len=stream.readLen();
		gsceneDic=new IntObjectMap<GSceneConfig>(len);
		sceneDic=new IntObjectMap<SceneConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new GSceneConfig();
			config.readBytesSimple(stream);
			gsceneDic.put(config.id,config);
			sceneDic.put(config.id,config);
		}
	}
	
	/// <summary>
	/// 读取界面表
	/// </summary>
	protected override void readUI(BytesReadStream stream)
	{
		GUIConfig config;
		int len=stream.readLen();
		guiDic=new IntObjectMap<GUIConfig>(len);
		uiDic=new IntObjectMap<UIConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new GUIConfig();
			config.readBytesSimple(stream);
			guiDic.put(config.id,config);
			uiDic.put(config.id,config);
		}
	}
	
	/// <summary>
	/// 添加到Config上
	/// </summary>
	public override void addToConfigOne(int type)
	{
		base.addToConfigOne(type);
		
		switch(type)
		{
			case ConfigType.Function:
			{
				GFunctionConfig.addGDic(gfunctionDic);
			}
				break;
			case ConfigType.Scene:
			{
				GSceneConfig.addGDic(gsceneDic);
			}
				break;
			case ConfigType.UI:
			{
				GUIConfig.addGDic(guiDic);
			}
				break;
		}
	}
	
	/// <summary>
	/// 读取功能表
	/// </summary>
	protected override void readFunction(BytesReadStream stream)
	{
		GFunctionConfig config;
		int len=stream.readLen();
		gfunctionDic=new IntObjectMap<GFunctionConfig>(len);
		functionDic=new IntObjectMap<FunctionConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new GFunctionConfig();
			config.readBytesSimple(stream);
			gfunctionDic.put(config.id,config);
			functionDic.put(config.id,config);
		}
	}
	
}
