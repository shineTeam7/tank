using ShineEngine;

/// <summary>
/// g单位位置数据(generated by shine)
/// </summary>
public class GUnitPosData:UnitPosData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GBaseDataType.GUnitPos;
	
	/// <summary>
	/// 射击朝向
	/// </summary>
	public DirData shootDir;
	
	public GUnitPosData()
	{
		_dataID=GBaseDataType.GUnitPos;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "GUnitPosData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			this.shootDir=(DirData)stream.createData(DirData.dataID);
			this.shootDir.readBytesFull(stream);
		}
		else
		{
			this.shootDir=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.shootDir!=null)
		{
			stream.writeBoolean(true);
			this.shootDir.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			this.shootDir=(DirData)stream.createData(DirData.dataID);
			this.shootDir.readBytesSimple(stream);
		}
		else
		{
			this.shootDir=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.shootDir!=null)
		{
			stream.writeBoolean(true);
			this.shootDir.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is GUnitPosData))
			return;
		
		GUnitPosData mData=(GUnitPosData)data;
		
		this.shootDir=mData.shootDir;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is GUnitPosData))
			return;
		
		GUnitPosData mData=(GUnitPosData)data;
		
		if(mData.shootDir!=null)
		{
			this.shootDir=(DirData)BytesControl.createData(DirData.dataID);
			this.shootDir.copy(mData.shootDir);
		}
		else
		{
			this.shootDir=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		GUnitPosData mData=(GUnitPosData)data;
		if(mData.shootDir!=null)
		{
			if(this.shootDir==null)
				return false;
			if(!this.shootDir.dataEquals(mData.shootDir))
				return false;
		}
		else
		{
			if(this.shootDir!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("shootDir");
		writer.sb.Append(':');
		if(this.shootDir!=null)
		{
			this.shootDir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("DirData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.shootDir=null;
	}
	
}
